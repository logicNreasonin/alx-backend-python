pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.9'
        VENV_PATH = 'venv'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Pulling source code from GitHub...'
                git branch: 'main', 
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/YOUR_USERNAME/alx-backend-python.git'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python virtual environment...'
                sh '''
                    python3 -m venv ${VENV_PATH}
                    . ${VENV_PATH}/bin/activate
                    pip install --upgrade pip
                    pip install wheel setuptools
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                dir('messaging_app') {
                    sh '''
                        . ../${VENV_PATH}/bin/activate
                        
                        # Install requirements if file exists
                        if [ -f requirements.txt ]; then
                            pip install -r requirements.txt
                        fi
                        
                        # Install testing dependencies
                        pip install pytest pytest-html pytest-cov pytest-mock
                        
                        # Install any additional dependencies for the messaging app
                        pip install mock unittest-mock
                    '''
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                echo 'Running code quality checks...'
                dir('messaging_app') {
                    sh '''
                        . ../${VENV_PATH}/bin/activate
                        
                        # Install code quality tools
                        pip install flake8 pylint
                        
                        # Run flake8 (ignore exit code for now)
                        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
                        
                        # Run pylint (ignore exit code for now)
                        pylint *.py || true
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                dir('messaging_app') {
                    sh '''
                        . ../${VENV_PATH}/bin/activate
                        
                        # Set Python path to include current directory
                        export PYTHONPATH="${PYTHONPATH}:."
                        
                        # Run pytest with detailed output and reports
                        python -m pytest tests/ -v \
                            --html=test-report.html \
                            --self-contained-html \
                            --cov=. \
                            --cov-report=html:coverage_html \
                            --cov-report=xml:coverage.xml \
                            --cov-report=term-missing \
                            --junit-xml=test-results.xml \
                            --tb=short
                    '''
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                echo 'Publishing test and coverage reports...'
                dir('messaging_app') {
                    // Publish HTML Test Report
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'test-report.html',
                        reportName: 'PyTest HTML Report',
                        reportTitles: 'Test Execution Report'
                    ])
                    
                    // Publish Coverage Report
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage_html',
                        reportFiles: 'index.html',
                        reportName: 'Code Coverage Report',
                        reportTitles: 'Coverage Analysis'
                    ])
                }
            }
        }
    }
    
    post {
        always {
            echo 'Archiving artifacts and cleaning up...'
            dir('messaging_app') {
                // Archive test artifacts
                archiveArtifacts artifacts: 'test-report.html,coverage.xml,test-results.xml', 
                                fingerprint: true, 
                                allowEmptyArchive: true
                
                // Publish JUnit test results
                publishTestResults([
                    testResultsPattern: 'test-results.xml',
                    mergeTestResults: true,
                    failOnError: true,
                    keepLongStdio: true
                ])
                
                // Clean up virtual environment
                sh '''
                    rm -rf ../${VENV_PATH}
                '''
            }
        }
        
        success {
            echo '‚úÖ Pipeline completed successfully!'
            echo 'Test reports are available in the Jenkins dashboard.'
        }
        
        failure {
            echo '‚ùå Pipeline failed. Check the console output for details.'
        }
        
        unstable {
            echo '‚ö†Ô∏è  Pipeline completed with test failures or unstable results.'
        }
        
        changed {
            echo 'üìß Pipeline status changed. Consider setting up notifications.'
        }
    }
}