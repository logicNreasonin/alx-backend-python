// messaging_app/Jenkinsfile

pipeline {
    agent any

    environment {
        PYTHONUNBUFFERED = '1'
        VENV_DIR = 'venv'
    }

    stages {

        // --- Stage 1: Install Dependencies ---
        // The code is already checked out by Jenkins automatically when using 'Pipeline script from SCM'.
        // So, our first real action is to install dependencies.
        stage('Install Dependencies') {
            steps {
                script {
                    echo "Creating Python virtual environment..."
                    sh "python3 -m venv ${VENV_DIR}"

                    echo 'Installing project dependencies...'
                    // Activate venv and run commands in the same shell step.
                    // This assumes 'requirements.txt' is in your GitHub repository root.
                    if (fileExists('requirements.txt')) {
                        sh ". ${VENV_DIR}/bin/activate && pip install --upgrade pip && pip install -r requirements.txt"
                    } else {
                        // Fallback: If no requirements.txt, just install pytest for the tests.
                        echo 'requirements.txt not found. Installing pytest directly.'
                        sh ". ${VENV_DIR}/bin/activate && pip install --upgrade pip && pip install pytest"
                    }
                }
            }
        }

        // --- Stage 2: Run Tests with Pytest ---
        stage('Run Tests') {
            steps {
                script {
                    echo 'Running tests...'
                    try {
                        sh "mkdir -p reports"
                        sh ". ${VENV_DIR}/bin/activate && pytest --junitxml=reports/report.xml"
                    } catch (Exception err) {
                        echo "Tests failed. See report for details."
                        // We throw the error so the pipeline status reflects the failure.
                        throw err
                    } finally {
                        echo 'Publishing test report...'
                        // The 'junit' step archives the report and shows test results in the UI.
                        junit allowEmptyResults: true, testResults: 'reports/**/*.xml'
                    }
                }
            }
        }
    }

    // Post-build actions for cleanup
    post {
        always {
            echo 'Cleaning up workspace...'
            // Clean up the virtual environment and reports directory.
            sh "rm -rf ${VENV_DIR} reports"
        }
    }
}